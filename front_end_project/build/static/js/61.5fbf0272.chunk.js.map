{"version":3,"file":"static/js/61.5fbf0272.chunk.js","mappings":"6VAsBoBA,EAAAA,EAAAA,IAVG,CACrBC,OAAQ,0CACRC,WAAY,+CACZC,UAAW,+BACXC,cAAe,2CACfC,kBAAmB,eACnBC,MAAO,8CANT,MAWMC,EAAW,IAAIC,EAAAA,GACrBD,EAASE,oBAAoB,CAC3BC,OAAQ,mBAGH,MAAMC,GAAOC,EAAAA,EAAAA,OAUFC,EAAAA,EAAAA,M,8FCdlB,MAAMC,UAAcC,EAAAA,UAAUC,WAAAA,GAAA,SAAAC,WAAA,KAC5BC,MAAQ,CACNC,KAAM,GACNC,MAAO,GACPC,SAAU,GACVC,gBAAiB,GACjBC,WAAW,EACXC,aAAc,GACdC,UAAU,EACVC,iBAAiB,EACjBC,YAAY,GACZ,KAEFC,aAAgBC,IACdC,KAAKC,SAAS,CAAER,WAAW,EAAMC,aAAcK,IAE/CG,YAAW,KACTF,KAAKC,SAAS,CAAER,WAAW,GAAQ,GAClC,IAAK,EACR,KAEFU,qBAAwBC,IACtBC,QAAQC,IAAI,mBAAmBF,IAAU,EACzC,KAEFG,qBAAwBH,IACtBC,QAAQC,IAAI,mBAAmBF,IAAU,EACzC,KAEFI,kBAAoBC,UAClB,MAAMhC,EAAW,IAAIC,EAAAA,IACf,WAAEmB,GAAeG,KAAKZ,OAC5BsB,EAAAA,EAAAA,IAAgB7B,EAAMJ,GACnBkC,MAAK,KACJX,KAAKF,aAAa,uBAClBE,KAAKC,SAAS,CAAEL,iBAAiB,IACjCgB,eAAeC,QAAQ,SAAU,YAAY,IAE9CC,OAAOC,GAAQC,MAAMD,KACpBlB,EACFoB,aAAaJ,QAAQ,aAAc,QAEnCI,aAAaC,WAAW,aAC1B,EACA,KACFC,mBAAqBV,UAEnB,GADAW,EAAMC,iBACFrB,KAAKZ,MAAMO,SAEb,YADAK,KAAKsB,mBAAmBF,GAG1B,MAAM,MAAE9B,EAAK,SAAEC,EAAQ,WAAEM,GAAeG,KAAKZ,MAC7C,GAAKE,GAAUC,EAIf,IACE,MAAMgC,QAAiBC,MAAM,oCAAqC,CAChEC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEvC,QAAOC,eAE1BuC,QAAaP,EAASQ,OAE5B,GADA/B,KAAKC,SAAS,CAAER,WAAW,EAAMC,aAAc,yBAC1C6B,EAASS,GAAI,CAChB,MAAMC,EACW,0BAAfH,EAAKI,MACD,gFACAJ,EAAKI,OAAS,6BACpB,MAAM,IAAIC,MAAMF,EAClB,CAEAjC,KAAKF,aAAa,uBAClBE,KAAKC,SAAS,CAAEL,iBAAiB,IAEjCgB,eAAeC,QAAQ,SAAU,aAC7BhB,EACFoB,aAAaJ,QAAQ,aAAc,QAEnCI,aAAaC,WAAW,aAG5B,CAAE,MAAOgB,GACPlC,KAAKF,aAAaoC,EAAMnC,QAC1B,MAjCEC,KAAKF,aAAa,uCAiCpB,EACA,KAEFwB,mBAAqBb,UACnBW,EAAMC,iBACN,MAAM,MAAE/B,EAAK,SAAEC,EAAQ,gBAAEC,GAAoBQ,KAAKZ,MAClD,GAAIG,IAAaC,EAOjB,IACE,MAAM+B,QAAiBC,MAAM,oCAAqC,CAChEC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEvC,QAAOC,eAE1BuC,QAAaP,EAASQ,OAQ5B,GAPA/B,KAAKC,SAAS,CACZR,WAAW,EACXC,aAAc,sBACdJ,MAAO,GACPC,SAAU,GACVC,gBAAiB,MAEd+B,EAASS,GAAI,CAChB,MAAMC,EACW,yBAAfH,EAAKI,MACD,qFACAJ,EAAKI,OAAS,4CACpB,MAAM,IAAIC,MAAMF,EAClB,CACAjC,KAAKF,aAAa,2CAClBE,KAAKC,SAAS,CACZX,MAAO,GACPC,SAAU,GACVC,gBAAiB,GACjBG,UAAU,GAId,CAAE,MAAOuC,GACPlC,KAAKF,aAAaoC,EAAMnC,QAC1B,MAxCEC,KAAKC,SAAS,CACZR,WAAW,EACXC,aAAc,2BAsClB,EACA,KAEF0C,kBAAqBhB,IACnBpB,KAAKC,SAAS,CAAE,CAACmB,EAAMiB,OAAOhD,MAAO+B,EAAMiB,OAAOC,OAAQ,EAI5D,KACAC,aAAgBnB,IACdA,EAAMC,gBAAgB,EAIxB,KAEAmB,iBAAmB,KACjBxC,KAAKC,UAAUwC,IAAS,CAAQ5C,YAAa4C,EAAU5C,cAAc,EACrE,KAEF6C,aAAe,KACb1C,KAAKC,UAAUwC,IAAS,CAAQ9C,UAAW8C,EAAU9C,YAAY,CACjE,CAEFgD,MAAAA,GACE,MAAM,MACJrD,EAAK,SACLC,EAAQ,SACRI,EAAQ,UACRF,EAAS,aACTC,EAAY,gBACZE,EAAe,WACfC,GACEG,KAAKZ,MAET,OACEwD,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACGlD,GAAkBgD,EAAAA,EAAAA,KAACG,EAAAA,SAAQ,CAACC,GAAG,WAC9BJ,EAAAA,EAAAA,KAAA,OAAKK,UAAU,yDAAwDH,UACrEF,EAAAA,EAAAA,KAACM,EAAAA,EAAM,CAAAJ,UACLK,EAAAA,EAAAA,MAAA,OAAKF,UAAU,8FAA6FH,SAAA,EAC1GF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,qCAAoCH,UACjDK,EAAAA,EAAAA,MAAA,OAAKF,UAAW,YAAWtD,EAAW,YAAc,IAAKmD,SAAA,CACtDrD,IACCmD,EAAAA,EAAAA,KAAA,OAAKK,UAAU,sBAAqBH,SAAEpD,KAGxCyD,EAAAA,EAAAA,MAAA,OAAKF,UAAU,0BAAyBH,SAAA,EACtCF,EAAAA,EAAAA,KAAA,MAAIK,UAAU,8BAA6BH,SAAC,wBAC5CK,EAAAA,EAAAA,MAAA,QACEC,OAAO,IACP3B,OAAO,OACPwB,UAAU,4CACVI,SAAUrD,KAAKmB,mBAAmB2B,SAAA,EAElCF,EAAAA,EAAAA,KAAA,SACEU,QAAQ,QACRL,UAAU,mCAAkCH,SAC7C,mBAGDF,EAAAA,EAAAA,KAAA,SACEW,KAAK,QACLlE,KAAK,QACLiD,MAAOhD,EACPkE,SAAUxD,KAAKoC,kBACfqB,aAAa,QACbR,UAAU,mFAGZL,EAAAA,EAAAA,KAAA,SACEU,QAAQ,WACRL,UAAU,wBAAuBH,SAClC,cAGDF,EAAAA,EAAAA,KAAA,SACEW,KAAK,WACLlE,KAAK,WACLiD,MAAO/C,EACPiE,SAAUxD,KAAKoC,kBACfqB,aAAa,mBACbR,UAAU,mFAGZE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,0BAAyBH,SAAA,EACtCF,EAAAA,EAAAA,KAAA,SACEW,KAAK,WACLG,QAAS7D,EACT2D,SAAUxD,KAAKwC,iBACfmB,GAAG,WACHV,UAAU,UAEZL,EAAAA,EAAAA,KAAA,SAAOU,QAAQ,WAAWL,UAAU,gBAAeH,SAAC,oBAGtDF,EAAAA,EAAAA,KAAA,KAAAE,UACEF,EAAAA,EAAAA,KAAA,KAAGgB,KAAK,SAASX,UAAU,wBAAuBH,SAAC,6BAGrDF,EAAAA,EAAAA,KAAA,UACEW,KAAK,SACLN,UAAU,4PAA2PH,SACtQ,cAIHF,EAAAA,EAAAA,KAAA,KAAGK,UAAU,mBAAkBH,SAAC,yBAChCK,EAAAA,EAAAA,MAAA,OAAKF,UAAU,6CAA4CH,SAAA,EACzDF,EAAAA,EAAAA,KAAA,KAAGgB,KAAK,GAAEd,UAACF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,iBAAiBY,IAAKC,OAChDlB,EAAAA,EAAAA,KAAA,KAAGgB,KAAK,GAAEd,UAACF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,mBAAmBY,IAAKE,OAClDnB,EAAAA,EAAAA,KAAA,KAAGgB,KAAK,GAAEd,UAACF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,iBAAiBY,I,imJAE7CV,EAAAA,EAAAA,MAAA,KAAGF,UAAU,mBAAkBH,SAAA,CAAC,yBACP,KACvBF,EAAAA,EAAAA,KAAA,KAAGK,UAAU,4CAA4CW,KAAK,SAASI,QAAShE,KAAK0C,aAAaI,SAAC,wBAO3GK,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mBAAkBH,SAAA,CAC7B9C,KAAKZ,MAAMO,UAMXwD,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWH,SAAA,EACxBF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,8BACJF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,oDAPLK,EAAAA,EAAAA,MAAA,OAAKF,UAAU,2BAA0BH,SAAA,EACvCF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,yBACJF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,yDAQPF,EAAAA,EAAAA,KAAA,OAAKqB,MAAM,4BAA4BD,QAAShE,KAAK0C,aAAaI,SAC9D9C,KAAKZ,MAAMO,UAGXiD,EAAAA,EAAAA,KAAA,QAAMqB,MAAM,QAAOnB,SAAC,YAFpBF,EAAAA,EAAAA,KAAA,QAAMqB,MAAM,QAAOnB,SAAC,yBAYxC,EAGF,S","sources":["pages/utils/firebase.js","pages/login/login.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport {\r\n  getAuth,\r\n  signInWithPopup,\r\n  GoogleAuthProvider,\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword,\r\n  signOut,\r\n} from \"firebase/auth\";\r\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\r\nimport userEvent from \"@testing-library/user-event\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCgBPNTLuvfKQpZiOCJs1PRKVgy3nDhwn0\",\r\n  authDomain: \"chameleon-website-login-page.firebaseapp.com\",\r\n  projectId: \"chameleon-website-login-page\",\r\n  storageBucket: \"chameleon-website-login-page.appspot.com\",\r\n  messagingSenderId: \"462355158431\",\r\n  appId: \"1:462355158431:web:ea9cfdc4489153ca8999aa\",\r\n};\r\n\r\n// Initialize Firebase\r\nconst firebaseapp = initializeApp(firebaseConfig);\r\nconst provider = new GoogleAuthProvider();\r\nprovider.setCustomParameters({\r\n  prompt: \"select_account\",\r\n});\r\n\r\nexport const auth = getAuth();\r\n\r\n// signOut(auth)\r\n//   .then(() => {\r\n//     console.log(\"logged out successfully\");\r\n//   })\r\n//   .catch((error) => {\r\n//     error.message();\r\n//   });\r\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\r\nexport const db = getFirestore();\r\n\r\nexport const createUserDocFromAuth = async (\r\n  userAuth,\r\n  additionalInformation = {}\r\n) => {\r\n  if (!userAuth.email) return;\r\n  const userDocRef = doc(db, \"users\", userAuth.uid);\r\n\r\n  const userSnapshot = await getDoc(userDocRef);\r\n\r\n  if (!userSnapshot.exists()) {\r\n    const { fullname, email } = userAuth;\r\n    const createdAt = new Date();\r\n\r\n    try {\r\n      await setDoc(userDocRef, {\r\n        fullname,\r\n        email,\r\n        createdAt,\r\n        ...additionalInformation,\r\n      });\r\n    } catch (error) {\r\n      console.log(\"error\", error.message);\r\n    }\r\n  }\r\n\r\n  return userDocRef;\r\n};\r\n\r\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\r\n  if (!email || !password) return;\r\n  return await createUserWithEmailAndPassword(auth, email, password);\r\n};\r\n\r\nexport const signinAuthUserWithEmailAndPassword = async (email, password) => {\r\n  if (!email || !password) return;\r\n  return await signInWithEmailAndPassword(auth, email, password);\r\n};\r\n","\r\nimport React, { Component } from \"react\";\r\nimport \"./login.css\"; // Make sure the path is correct\r\nimport Logo from \"./image/Chameleon_Logo.png\";\r\nimport Google from \"./image/google.png\";\r\nimport Linkedin from \"./image/linkedin.png\";\r\nimport Microsoft from \"./image/microsoft.png\";\r\nimport Screen from \"../../components/app/Screen\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { auth } from \"../utils/firebase\";\r\nimport { GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\r\n\r\n// init branch\r\n\r\nimport Chatbox from '../Chatbot/Chatbox';\r\nimport '../Chatbot/chatbox.css';\r\nimport chameleonLogo from \"../../assets/ChameleonLogo.png\";\r\nimport chatOpenImg from \"../Chatbot/images/chat-open.png\";\r\nimport chatCloseImg from \"../Chatbot/images/chat-close.png\";\r\nimport dotMenuImg from \"../Chatbot/images/dot-menu.png\";\r\nimport chatIcon from \"../Chatbot/images/chat-icon.png\";\r\nimport fileSelectIcon from \"../Chatbot/images/file-select.png\";\r\nimport sendMessageImg from \"../Chatbot/images/send-message.png\";\r\n\r\nclass Login extends Component {\r\n  state = {\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n    showToast: false,\r\n    toastMessage: \"\",\r\n    isSignUp: false,\r\n    isAuthenticated: false,\r\n    rememberMe: false,\r\n  };\r\n\r\n  displayToast = (message) => {\r\n    this.setState({ showToast: true, toastMessage: message });\r\n\r\n    setTimeout(() => {\r\n      this.setState({ showToast: false });\r\n    }, 5000);\r\n  };\r\n\r\n  handleExternalSignIn = (service) => {\r\n    console.log(`Signing in with ${service}`); // Implement sign-in logic here\r\n  };\r\n\r\n  handleExternalSignUp = (service) => {\r\n    console.log(`Signing up with ${service}`); // Implement sign-up logic here\r\n  };\r\n\r\n  handleGoogleLogin = async () => {\r\n    const provider = new GoogleAuthProvider();\r\n    const { rememberMe } = this.state;\r\n    signInWithPopup(auth, provider)\r\n      .then(() => {\r\n        this.displayToast(\"Sign in successful!\");\r\n        this.setState({ isAuthenticated: true });\r\n        sessionStorage.setItem(\"status\", \"logged in\");\r\n      })\r\n      .catch((err) => alert(err));\r\n    if (rememberMe) {\r\n      localStorage.setItem(\"rememberMe\", \"true\");\r\n    } else {\r\n      localStorage.removeItem(\"rememberMe\");\r\n    }\r\n  };\r\n  handleSubmitSignIn = async (event) => {\r\n    event.preventDefault();\r\n    if (this.state.isSignUp) {\r\n      this.handleSubmitSignUp(event);\r\n      return;\r\n    }\r\n    const { email, password, rememberMe } = this.state;\r\n    if (!email || !password) {\r\n      this.displayToast(\"Please enter both email and password\");\r\n      return;\r\n    }\r\n    try {\r\n      const response = await fetch(\"http://localhost:3002/auth/signin\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n      const data = await response.json();\r\n      this.setState({ showToast: true, toastMessage: \"Sign in successful!\" });\r\n      if (!response.ok) {\r\n        const errorMessage =\r\n          data.error === \"Authentication failed\"\r\n            ? \"Authentication failed. Please check your username and password and try again.\"\r\n            : data.error || \"An unknown error occurred.\";\r\n        throw new Error(errorMessage);\r\n      }\r\n\r\n      this.displayToast(\"Sign in successful!\");\r\n      this.setState({ isAuthenticated: true });\r\n\r\n      sessionStorage.setItem(\"status\", \"logged in\");\r\n      if (rememberMe) {\r\n        localStorage.setItem(\"rememberMe\", \"true\");\r\n      } else {\r\n        localStorage.removeItem(\"rememberMe\");\r\n      }\r\n      // Redirect or perform other actions\r\n    } catch (error) {\r\n      this.displayToast(error.message);\r\n    }\r\n  };\r\n\r\n  handleSubmitSignUp = async (event) => {\r\n    event.preventDefault();\r\n    const { email, password, confirmPassword } = this.state;\r\n    if (password !== confirmPassword) {\r\n      this.setState({\r\n        showToast: true,\r\n        toastMessage: \"Passwords do not match!\",\r\n      });\r\n      return; // Stop the form submission if passwords do not match\r\n    }\r\n    try {\r\n      const response = await fetch(\"http://localhost:3002/auth/signup\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n      const data = await response.json();\r\n      this.setState({\r\n        showToast: true,\r\n        toastMessage: \"Sign up successful!\",\r\n        email: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n      });\r\n      if (!response.ok) {\r\n        const errorMessage =\r\n          data.error === \"Email already exists\"\r\n            ? \"An account with this email already exists. Please use a different email or log in.\"\r\n            : data.error || \"An unknown error occurred during sign up.\";\r\n        throw new Error(errorMessage);\r\n      }\r\n      this.displayToast(\"One Step! Please verify your email now!\");\r\n      this.setState({\r\n        email: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        isSignUp: false,\r\n      });\r\n      // Redirect or perform other actions\r\n\r\n    } catch (error) {\r\n      this.displayToast(error.message);\r\n    }\r\n  };\r\n\r\n  handleInputChange = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n\r\n  // Placeholder for sign-up logic\r\n  handleSignUp = (event) => {\r\n    event.preventDefault();\r\n    // Implement sign-up logic here\r\n  };\r\n\r\n  //handle checkbox change of Remember Me prop\r\n\r\n  toggleRememberMe = () => {\r\n    this.setState((prevState) => ({ rememberMe: !prevState.rememberMe }));\r\n  };\r\n\r\n  toggleSignUp = () => {\r\n    this.setState((prevState) => ({ isSignUp: !prevState.isSignUp }));\r\n  };\r\n\r\n  render () {\r\n    const {\r\n      email,\r\n      password,\r\n      isSignUp,\r\n      showToast,\r\n      toastMessage,\r\n      isAuthenticated,\r\n      rememberMe,\r\n    } = this.state;\r\n\r\n    return (\r\n      <>\r\n        {isAuthenticated ? <Redirect to=\"/home\" /> :\r\n          <div className=\"bg-gray-100 w-full h-full overflow-y-auto font-poppins\">\r\n            <Screen>\r\n              <div className=\"max-w-5xl mx-auto my-14 flex flex-col lg:flex-row rounded-lg overflow-hidden drop-shadow-lg\">\r\n                <div className=\"container_2 w-[540px] lg:w-[640px]\">\r\n                  <div className={`dowebok ${isSignUp ? \"s--signup\" : \"\"}`}>\r\n                    {showToast && (\r\n                      <div className=\"login-toast-message\">{toastMessage}</div>\r\n                    )}\r\n\r\n                    <div className=\"form sign-in rounded-md\">\r\n                      <h2 className=\"text-gray-600 font-semibold\">Login to Chameleon</h2>\r\n                      <form\r\n                        action=\"#\"\r\n                        method=\"POST\"\r\n                        className=\"space-y-6 flex flex-col items-center mt-5\"\r\n                        onSubmit={this.handleSubmitSignIn}\r\n                      >\r\n                        <label\r\n                          htmlFor=\"email\"\r\n                          className=\"text-sm text-gray-700 text-start\"\r\n                        >\r\n                          Email address\r\n                        </label>\r\n                        <input\r\n                          type=\"email\"\r\n                          name=\"email\"\r\n                          value={email}\r\n                          onChange={this.handleInputChange}\r\n                          autoComplete=\"email\"\r\n                          className=\"w-full rounded-2xl border-3 py-1.5 mt-2 text-gray-700 sm:text-sm sm:leading-6\"\r\n                        />\r\n\r\n                        <label\r\n                          htmlFor=\"password\"\r\n                          className=\"text-sm text-gray-700\"\r\n                        >\r\n                          Password\r\n                        </label>\r\n                        <input\r\n                          type=\"password\"\r\n                          name=\"password\"\r\n                          value={password}\r\n                          onChange={this.handleInputChange}\r\n                          autoComplete=\"current-password\"\r\n                          className=\"w-full rounded-2xl border-3 py-1.5 mt-2 text-gray-700 sm:text-sm sm:leading-6\"\r\n                        />\r\n\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            checked={rememberMe}\r\n                            onChange={this.toggleRememberMe}\r\n                            id=\"remember\"\r\n                            className=\"mt-0\"\r\n                          />\r\n                          <label htmlFor=\"remember\" className=\"text-gray-700\">Remember Me</label>\r\n                        </div>\r\n\r\n                        <p>\r\n                          <a href=\"/reset\" className=\"text-gray-500 text-sm\">Forgot your password?</a>\r\n                        </p>\r\n\r\n                        <button\r\n                          type=\"submit\"\r\n                          className=\"submit bg-[#559166] flex justify-center rounded-3xl py-2 px-5 font-semibold shadow-sm text-gray-50 hover:text-[#559166] hover:bg-green-sage focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\r\n                        >\r\n                          Login\r\n                        </button>\r\n                      </form>\r\n                      <p className=\"text-center mt-3\">-- or login with --</p>\r\n                      <div className=\"flex justify-center items-center space-x-4\">\r\n                        <a href=\"\"><img className=\"inline h-9 w-9\" src={Google}></img></a>\r\n                        <a href=\"\"><img className=\"inline h-12 w-12\" src={Linkedin}></img></a>\r\n                        <a href=\"\"><img className=\"inline h-7 w-7\" src={Microsoft}></img></a>\r\n                      </div>\r\n                      <p className=\"text-center pt-4\">\r\n                        Don't have an account?{\" \"}\r\n                        <a className=\"text-[#559166] no-underline font-semibold\" href=\"signup\" onClick={this.toggleSignUp}>\r\n                          Sign Up\r\n                        </a>\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"auth-form-switch\">\r\n                  {!this.state.isSignUp ? (\r\n                    <div className=\"img__text drop-shadow-xl\">\r\n                      <h2>Not registered yet?</h2>\r\n                      <p>Register now and explore abundant opportunities!</p>\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"img__text\">\r\n                      <h2>Already have an account?</h2>\r\n                      <p>Log in with your account, long time no see!</p>\r\n                    </div>\r\n                  )}\r\n                  <div class=\"img__btn  hover:text-base\" onClick={this.toggleSignUp}>\r\n                    {!this.state.isSignUp ? (\r\n                      <span class=\"m--up\">Sign Up</span>\r\n                    ) : (\r\n                      <span class=\"m--up\">Log In</span>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Screen>\r\n          </div>\r\n        }\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n\r\n"],"names":["initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","provider","GoogleAuthProvider","setCustomParameters","prompt","auth","getAuth","getFirestore","Login","Component","constructor","arguments","state","name","email","password","confirmPassword","showToast","toastMessage","isSignUp","isAuthenticated","rememberMe","displayToast","message","this","setState","setTimeout","handleExternalSignIn","service","console","log","handleExternalSignUp","handleGoogleLogin","async","signInWithPopup","then","sessionStorage","setItem","catch","err","alert","localStorage","removeItem","handleSubmitSignIn","event","preventDefault","handleSubmitSignUp","response","fetch","method","headers","body","JSON","stringify","data","json","ok","errorMessage","error","Error","handleInputChange","target","value","handleSignUp","toggleRememberMe","prevState","toggleSignUp","render","_jsx","_Fragment","children","Redirect","to","className","Screen","_jsxs","action","onSubmit","htmlFor","type","onChange","autoComplete","checked","id","href","src","Google","Linkedin","onClick","class"],"sourceRoot":""}