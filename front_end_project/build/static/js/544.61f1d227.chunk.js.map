{"version":3,"file":"static/js/544.61f1d227.chunk.js","mappings":"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","sources":["pages/Chatbot/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./Chatbot.css\";\r\nimport MoreHorizIcon from \"@mui/icons-material/MoreHoriz\";\r\nimport Screen from \"../../components/app/Screen\";\r\n\r\nconst Chatbot = () => {\r\n  const [userMessage, setUserMessage] = useState(\"\");\r\n  const chatInputRef = useRef(null);\r\n  const chatboxRef = useRef(null);\r\n  const sendButtonRef = useRef(null);\r\n  const onclickHandler = (func) => {\r\n    if (func) func();\r\n  };\r\n\r\n  const initialMessages = [\r\n    { id: \"0\", message: \"This is Chameleon Chatbot! To get started choose from one of the below\", trigger: \"1\", },\r\n    { id: \"1\", message: \"Learn about our projects\", trigger: \"2\", onclick: () => window.location.replace(\"/projects\"), },\r\n    { id: \"2\", message: \"Support us\", trigger: \"3\", onclick: () => window.location.replace(\"/projects\"), },\r\n    { id: \"3\", message: \" I have another question\", trigger: 4, onclick: () => window.location.replace(\"/projects\"), },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const handleChat = () => {\r\n      const userMsg = userMessage.trim();\r\n      if (!userMsg) return;\r\n\r\n      const chatLi = document.createElement(\"li\");\r\n      chatLi.classList.add(\"chat\", \"outgoing\");\r\n      chatLi.innerHTML = `<p>${userMsg}</p>`;\r\n\r\n      chatboxRef.current.appendChild(chatLi);\r\n      chatInputRef.current.value = \"\";\r\n      setUserMessage(\"\");\r\n\r\n      setTimeout(() => {\r\n        const incomingChatLi = document.createElement(\"li\");\r\n        incomingChatLi.classList.add(\"chat\", \"incoming\");\r\n        incomingChatLi.innerHTML = `<img src=\"images/chameleon (2).png\" alt=\"Incoming Message Icon\"><p>Thinking...</p>`;\r\n\r\n        chatboxRef.current.appendChild(incomingChatLi);\r\n        // Simulate response\r\n      }, 600);\r\n    };\r\n\r\n    const sendButton = sendButtonRef.current;\r\n    sendButton.addEventListener(\"click\", handleChat);\r\n\r\n    return () => { sendButton.removeEventListener(\"click\", handleChat); };\r\n  }, [userMessage]);\r\n\r\n  return (\r\n    <Screen>\r\n      <div className=\"chatbot-container\">\r\n        <div className=\"chatbot\">\r\n          <header>\r\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n              <img\r\n                src={require(\"./images/ChameleonLogo.png\")}\r\n                alt=\"Chatbot\"\r\n                className=\"chatbot-image\"\r\n              />\r\n              <h2>Chameleon</h2>\r\n            </div>\r\n\r\n            <button className=\"options-button\">\r\n             <MoreHorizIcon style={{ color: 'white' }} />\r\n            </button>\r\n          </header>\r\n          <ul className=\"chatbox\" ref={chatboxRef}>\r\n            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n              <div>\r\n                <img src={require(\"./images/chameleonbot.png\")} alt=\"Chatbot\" height={50} width={50} />\r\n              </div>\r\n\r\n              <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"8px\", fontFamily: \"'Caveat', cursive\", }} >\r\n                {initialMessages.map((item, index) => (\r\n                  <div\r\n                    style={{ maxWidth: \"70%\", backgroundColor: \"#a8bcba\", borderRadius: \"15px\", padding: \"10px\", marginLeft: \"10px\", marginBottom: \"5px\", boxShadow: \"0px 4px 8px rgba(0, 0, 0, 0.2)\", fontFamily: \"'Pacifico', cursive\", fontSize: \"16px\", lineHeight: \"1.5\", transition: index >= 1 ? \"transform 0.2s ease-in-out\" : \"none\", cursor: \"pointer\", }}\r\n                    onMouseOver={\r\n                      index >= 1\r\n                        ? (e) => {\r\n                          e.currentTarget.style.transform = \"scale(1.05)\";\r\n                          e.currentTarget.style.backgroundColor = \"#768b8a\"; // Change background color on hover\r\n                        }\r\n                        : null\r\n                    }\r\n                    onMouseOut={\r\n                      index >= 1\r\n                        ? (e) => {\r\n                          e.currentTarget.style.transform = \"scale(1)\";\r\n                          e.currentTarget.style.backgroundColor = \"#8fa5a4\"; // Revert to original background color\r\n                        }\r\n                        : null\r\n                    }\r\n                    onClick={() => onclickHandler(item.onclick)}\r\n                  >\r\n                    {item.message}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </ul>\r\n          <div className=\"chat-input\" >\r\n            <textarea placeholder=\"Enter your message here..\" spellCheck=\"false\" ref={chatInputRef} onChange={(e) => setUserMessage(e.target.value)} />\r\n            <span id=\"send-btn\" className=\"material-symbols-rounded\" ref={sendButtonRef} > Send </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Screen>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"names":["Chatbot","userMessage","setUserMessage","useState","chatInputRef","useRef","chatboxRef","sendButtonRef","initialMessages","id","message","trigger","onclick","window","location","replace","useEffect","handleChat","userMsg","trim","chatLi","document","createElement","classList","add","innerHTML","current","appendChild","value","setTimeout","incomingChatLi","sendButton","addEventListener","removeEventListener","_jsx","Screen","children","className","_jsxs","style","display","alignItems","src","require","alt","MoreHorizIcon","color","ref","flexDirection","height","width","gap","fontFamily","map","item","index","maxWidth","backgroundColor","borderRadius","padding","marginLeft","marginBottom","boxShadow","fontSize","lineHeight","transition","cursor","onMouseOver","e","currentTarget","transform","onMouseOut","onClick","func","placeholder","spellCheck","onChange","target"],"sourceRoot":""}